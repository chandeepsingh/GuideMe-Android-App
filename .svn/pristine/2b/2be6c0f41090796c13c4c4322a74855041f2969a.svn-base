package com.example.guideme;

import java.io.IOException;
import java.util.List;
import java.util.Locale;

import android.app.Activity;
import android.content.Context;
import android.location.Address;
import android.location.Criteria;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.widget.TextView;
import android.widget.Toast;

public class LocationActivity extends Activity implements LocationListener{

	private LocationManager LC;
	private String provider;
	private TextView latitudeval;
	private TextView longitudeval;
	private TextView addressval;
	Geocoder geocoder;

	
	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_location);
        
        LC = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        latitudeval = (TextView) findViewById(R.id.latitudeval);
        longitudeval = (TextView) findViewById(R.id.longitudeval);
        addressval = (TextView) findViewById(R.id.address);
        Criteria criteria=new Criteria();
        provider = LC.getBestProvider(criteria, false);
        Location loc = LC.getLastKnownLocation(provider);
        geocoder = new Geocoder(this,Locale.ENGLISH);
        
        if(loc!=null)
        {
        	Toast.makeText(this, "Provider" + provider, Toast.LENGTH_LONG).show();
        }
        else
        {
        	latitudeval.setText("No provider");
        }
        
    }
	
	@Override
	protected void onResume(){
		super.onResume();
	    LC.requestLocationUpdates(provider, 400, 1, this);
	}
	
	  @Override
	protected void onPause() {
	    super.onPause();
	    LC.removeUpdates(this);
	  }
	
	@Override
    public void onLocationChanged(Location location) {
		//double lat = 37.42233;
		//double lon = -122.083;
   
		float lat = (float) (location.getLatitude());
        float lon = (float) (location.getLongitude());
        
        latitudeval.setText(String.valueOf(lat));
        longitudeval.setText(String.valueOf(lon));
        String add = GetAddress(String.valueOf(lat),String.valueOf(lon));
        //String add = null;
        if(add!="")
        {
        	addressval.setText(add);
        }
        else
        {
        	addressval.setText("Address cannot be found!");
        }
    }
	
	public String GetAddress(String lat, String lon)
	{
		System.out.println("TTop");
		String ret = "";
		/*Geocoder geocoder = new Geocoder(this, Locale.ENGLISH);
		
		System.out.println("Top");
		try {
		System.out.println("A");
			List<Address> addresses = geocoder.getFromLocation(Double.parseDouble(lat), Double.parseDouble(lon), 1);
			System.out.println("B");
			if(addresses != null) {
				System.out.println("C");
				Address returnedAddress = addresses.get(0);
				StringBuilder strReturnedAddress = new StringBuilder("Address:\n");
				for(int i=0; i<returnedAddress.getMaxAddressLineIndex(); i++) {
					strReturnedAddress.append(returnedAddress.getAddressLine(i)).append("\n");
				}
				ret = strReturnedAddress.toString();
				System.out.println("D");
			}
			else{
				System.out.println("E");
				ret = "No Address returned!";
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			ret = "Can't get Address!";
		}*/
		

		return ret;
	}

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.activity_location, menu);
        return true;
    }

	@Override
	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub
		Toast.makeText(this, "Disable Provider"+ provider, Toast.LENGTH_LONG).show();
		
	}

	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub
		Toast.makeText(this, "Enabled Provider"+ provider, Toast.LENGTH_LONG).show();
		
	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub
		
	}
}
